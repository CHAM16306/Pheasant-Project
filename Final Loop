library(scrm)
library(stringr)
library(locfit)
library(carData)
library(car)

sessionInfo()

#Kardos et al. 2015. He describes two measures of homozygosity - one where you look only at the minor allele frequency, and one where you look at both the minor and major alleles across the population. Kardos et al. 2015 (and everyone who uses PLINK to calculate homozygosity) uses the prior method: 
#sum of (1-2p(1-p))
#where p is the minor allele frequency at locus 1 across the whole population. 




#First we vdescribed our variables:
nhap=44#2*number of samples i.e. number of pheasante in real data (bc diploid) 
#2 seperate simulations, one for malaysian (20 indv) and mountain (22 indv)
nrep=1000#min 100, 1000 if fast enough
bp=1000000
N0=500 #effective population ≠ census size, mention in report!
T1=50/(4*(N0)) #time at bottleneck
N1=2 #pop at bottlneck
N2=150000 #ancestral pop
G=-(1/T1)*log(N1/(N0)) #exponential growth rate after bottleneck
a2=0 #exponential/constant growth rate in ancestral pop
theta0=4*(N0)*(1.33*10^-9)*bp #with 1.33*10^-9 = mutationrate per yer (=generation) per locus
p=N1/N2 #pop proportion at bottleneck (bottleneck/ancestral pop)
r = 0.03 #crossover probability between the two ends of the locus bc 3cM/Mb = 0.03% chance of crossover in the region
rho = 4*r*N0 #recombination rate

#mimic real data
#if  this happens (object has no variables), do heterozygosity
#with small seq by chance th eprobabilty of having a varient is v low ( all indv the same) 

Fh = matrix(ncol = nrep,nrow=nhap/2) #make columns for each iteration, with the number of rows = nbr of inividuals
#Fh calculated with only minor allele frequency (see Keller et al.)
G.EHet= matrix(nrow = nrep) #Global heterozygosity (Rita's formula)
G.EHom= matrix(nrow = nrep)
for(a in 1:nrep) #loop it nrep times
{
  command = paste(nhap, 1, "-t",theta0, "-G",G, "-eN",T1,p, "-eG",T1,a2, "-r",rho,bp , "-print-model")
  scrm.data<-scrm(command, file="test1")
  write.table(scrm.data, file = paste("tabledata",a, ".txt",sep = "")) #write a table for each loop and paste file in directory
  
 
  scrm.df=as.data.frame(scrm.data) #coerce to class data.frame
  
  if(dim(scrm.df)[2]==0){ #bc low mutation rate sometimes no variants; to avoid this, tell loop to make G.EHet and Fh equal 0 if the dimensions of the columns [2] of scrm.df are 0 (bc if dim = 0 that means no diversity which means there is no heterozygosity, only homozygosity)
    
    Fh[,a]<-0
    G.EHet[a]<-0 #conditions
    G.EHom[a]<-1
    
  }
  
  else{#if the dim ≠ 0 then just rin loop normally
    
  shuffled.data <- scrm.df[sample(nrow(scrm.df)),] #shuffle the rows
  shuffled.matrix <- data.matrix(shuffled.data, rownames.force = NA) #Convert a Data Frame to a Numeric Matrix
  diploid.data <- rowsum(shuffled.matrix, as.integer(gl(nrow(shuffled.matrix), 2, nrow(shuffled.matrix)))) #combine 2 rows into 1 (haploid into diploid)
  named.diploid <- ifelse(diploid.data %% 2 == 0,"Hom","Het") #if dividable by 2 and remainder 0, then name "Hom", if not name "Het"
  
  
  Hom_per_row = numeric() #Homozygosity per colum by counting the "Hom"s
  for (i in 1:nhap/2)
  {
    Hom_per_row[i] = sum(str_count(named.diploid[i,], "Hom"))
  }
  
  
  n.loci <- ncol(shuffled.matrix) #number of loci (i.e. segsites)
  hom00 <- sum(str_count(diploid.data, "0")) #nbr of homozygotes 00
  hom11 <- sum(str_count(diploid.data, "2")) #nbr of homozygotes 11
  het01 <- sum(str_count(diploid.data, "1")) #nbr of heterozygotes 01
  
  
  Mut_per_col = numeric() #Homozygosity per column
  maf = numeric() #allele frequency
  EHom = numeric() #Expected Homozygosity
  for (i in 1:n.loci)
  {
    Mut_per_col[i] = sum(str_count(shuffled.matrix[,i], "1")) #count all the 1 (=mutation, whereas 0 are the ancestral state) for each segsite
    
    maf[i]=Mut_per_col[i]/nhap #number of hom per column, divided by total number of rows (2*individuals), so maf per loci
    EHom[i]=1-2*maf[i]*(1-maf[i]) 
  }
  
  EHom
  SEHom = sum(EHom) #sum of expected homozygosity
  SOHom = hom00 + hom11  #sum of observed homozygosity

  Fh[,a]= (Hom_per_row-SEHom)/(n.loci-SEHom) #Fh as proxy for inbreeding
 
  
  rows= nrow(shuffled.matrix)
  cols=ncol(shuffled.matrix)
  total.sites = rows*cols #is the total number of sites needed for the caclulation of the gene diversity
  
  
  
  G.Mut_per_col = numeric() #number of allele 1 per column
  G.maf = numeric() #major allele frequency ratio = number of 1 divided by total number of alleles = p (because ratio)
  G.Min.mut_per_col=numeric() #number of allele 0 per column
  G.min.af = numeric() #minor allele frequency ratio = number of 0 divided by total number of alleles =p
  G.total.allele.freq=numeric() #sum of p^2 (individual observed homozygosity)
  
  for (i in 1:n.loci)
  {
    G.Mut_per_col[i] = sum(str_count(shuffled.matrix[,i], "1")) #count all the 1 (=mutation, whereas 0 are the ancestral state) for each segsite
    G.maf[i]=G.Mut_per_col[i]/nhap #number of hom per column, divided by total number of rows (2*individuals), so maf per loci
    #G.Min.mut_per_col[i] = sum(str_count(shuffled.matrix[,i], "0")) #count all the 0 (=mutation, whereas 0 are the ancestral state) for each segsite
    #G.min.af[i] = G.Min.mut_per_col[i]/nhap
    G.total.allele.freq[i]=  (G.maf[i])^2 #+ (G.min.af[i])^2 #sum of p^2
    
    G.EHet[a] =1-(sum(G.total.allele.freq[i])/ total.sites) #Global heterozygosity = 1-sum of the sum of the indv. obsv. homo. divided by total number of sites
    G.EHom[a] =(sum(G.total.allele.freq[i])/ total.sites)
  }
  
  
  
  }
  }


#write about how x % of the simualations had no diversity (where Fh = 0, get rif pf these)

Fh.means = colMeans(Fh)
Fh.subset = subset(Fh.means, Fh.means!=0)
G.EHet.subset = subset(G.EHet, G.EHet [,1]!=0)
G.EHet.mean = mean(G.EHet) 
G.EHet.median = median(G.EHet)
G.EHet.var = var(G.EHet)
write.csv(Fh.subset, file = "scrm.csv")


##################################################################################################################
#Plot Fh


#remember to not overwrite the mean.Fh.x
Fh.2.sim = Fh
Fh.4.sim = Fh
Fh.6.sim = Fh
Fh.8.sim = Fh
Fh.10.sim = Fh
Fh.20.sim = Fh
Fh.40.sim = Fh

Fh.means.2=colMeans(Fh.2.sim) #mean Fh per inividual
Fh.means.4=colMeans(Fh.4.sim)
Fh.means.6=colMeans(Fh.6.sim)
Fh.means.8=colMeans(Fh.8.sim)
Fh.means.10=colMeans(Fh.10.sim)
Fh.means.20=colMeans(Fh.20.sim)
Fh.means.40=colMeans(Fh.40.sim)

Fh.subset.2 = subset(Fh.means.2, Fh.means.2!=0)
Fh.subset.4 = subset(Fh.means.4, Fh.means.4!=0)
Fh.subset.6 = subset(Fh.means.6, Fh.means.6!=0)
Fh.subset.8 = subset(Fh.means.8, Fh.means.8!=0)
Fh.subset.10 = subset(Fh.means.10, Fh.means.10!=0)
Fh.subset.20 = subset(Fh.means.20, Fh.means.20!=0)
Fh.subset.40 = subset(Fh.means.40, Fh.means.40!=0)


Fh.2.loc=locfit(~Fh.subset.2, alpha=0.9) #~x for a density estimation model
Fh.4.loc=locfit(~Fh.subset.4) 
Fh.6.loc=locfit(~Fh.subset.6) 
Fh.8.loc=locfit(~Fh.subset.8 , alpha=0.9) 
Fh.10.loc=locfit(~Fh.subset.10) 
Fh.20.loc=locfit(~Fh.subset.20) 
Fh.40.loc=locfit(~Fh.subset.40) 


plot(Fh.2.loc, xlab="Fh", ylab="Density", ylim=c(0, 25), xlim=c(-0.4,0.4), col="firebrick2")
lines(Fh.4.loc, col="blue1")
lines(Fh.6.loc, col="green")
lines(Fh.8.loc, col="orange")
lines(Fh.10.loc, col="gray14")
lines(Fh.20.loc, col="purple")
lines(Fh.40.loc, col="deepskyblue")
abline(v=mean.Fh.mount,lty=2) #line to show the mean Fh for the real pheasant data

colours = c("firebrick2", "blue1", "green", "orange", "gray14", "purple", "deepskyblue")
legend("topright", legend=c("Fh.2","Fh.4", "Fh.6","Fh.8","Fh.10","Fh.20","Fh.40"), col = colours, cex=0.8, fill= colours, bty="n")



##################################################################################################################
#Global Heterozygosity Plot


#DO NOT OVERWRITE!!

G.EHet.2 = G.EHet
G.EHet.4 = G.EHet
G.EHet.6 = G.EHet
G.EHet.8 = G.EHet
G.EHet.10 = G.EHet
G.EHet.20 = G.EHet
G.EHet.40 = G.EHet



G.EHet.2.mean=mean(G.EHet.2) 
G.EHet.4.mean=mean(G.EHet.4) 
G.EHet.6.mean=mean(G.EHet.6) 
G.EHet.8.mean=mean(G.EHet.8) 
G.EHet.10.mean=mean(G.EHet.10) 
G.EHet.20.mean=mean(G.EHet.20)  
G.EHet.40.mean=mean(G.EHet.40) 


G.EHet.2.mean=median(G.EHet.2) 
G.EHet.4.mean=median(G.EHet.4) 
G.EHet.6.mean=median(G.EHet.6) 
G.EHet.8.mean=median(G.EHet.8) 
G.EHet.10.mean=median(G.EHet.10) 
G.EHet.20.mean=median(G.EHet.20)  
G.EHet.40.mean=median(G.EHet.40) 
##

var.G.EHet.2=var(G.EHet.2)
var.G.EHet.4=var(G.EHet.4) 
var.G.EHet.6=var(G.EHet.6) 
var.G.EHet.8=var(G.EHet.8) 
var.G.EHet.10=var(G.EHet.10) 
var.G.EHet.20=var(G.EHet.20)  
var.G.EHet.40=var(G.EHet.40) 


y=c(G.EHet.2.mean, G.EHet.4.mean, G.EHet.6.mean, G.EHet.8.mean, G.EHet.10.mean, G.EHet.20.mean, G.EHet.40.mean)
x=c(1,2,3,4,5,6,7)
err=c(var.G.EHet.2.mean, var.G.EHet.4.mean, var.G.EHet.6.mean, var.G.EHet.8.mean, var.G.EHet.10.mean, var.G.EHet.20.mean, var.G.EHet.40.mean)

colours2= c("blue", "red")

lm.mount =lm(y ~ x)
summary(lm.mount)
#look at p value

#intercept =  0.65756  
#slope =  0.02068 


plot(x, y, pch=19, ylab="Global Expected Heterozygosty", ylim=c(0.4,1.06), xaxt = "n", xlab='Founder size')
arrows(x, y-err, x, y+err, length=0.05, angle=90, code=3)
abline(h=G.EHet.mount, col="blue")
abline(lm.mount, col="red")
axis(1, at=1:7, labels=c("2","4","6","8","10", "20", "40"))
legend("topright", legend=c("Global Expected Heterozygosity in Mount Pheasants", "Line of best fit"), col = colours2 , cex=0.8, fill= colours2, bty = "n")

mtext(bquote( y == .(slope) * x + .(intercept)), side=4, line= 0.5) 


########### DO A BOYPLOT INSTEAD OF SCATTER ################

#zeros: no diversity found
G.EHet.2.subset =subset(G.EHet.2, G.EHet.2 [,1]!=0)
G.EHet.4.subset =subset(G.EHet.4, G.EHet.4 [,1]!=0)
G.EHet.6.subset =subset(G.EHet.6, G.EHet.6 [,1]!=0)
G.EHet.8.subset =subset(G.EHet.8, G.EHet.8 [,1]!=0)
G.EHet.10.subset =subset(G.EHet.10, G.EHet.10 [,1]!=0)
G.EHet.20.subset =subset(G.EHet.20, G.EHet.20 [,1]!=0)
G.EHet.40.subset =subset(G.EHet.40, G.EHet.40 [,1]!=0)

global.list = list(G.EHet.2.subset, G.EHet.4.subset, G.EHet.6.subset, G.EHet.8.subset, G.EHet.10.subset, G.EHet.20.subset, G.EHet.40.subset)

G.EHet.40.loc = locfit(~G.EHet.40.subset, alpha=0.8)
G.EHet.2.loc = locfit(~G.EHet.2.subset, alpha=0.8)

plot(G.EHet.40.loc, xlab="Fh", ylab="Density", col="firebrick2", xlim = c(0.5,1))
lines(G.EHet.2.loc)

boxplot(global.list, ylim= c(0.89, 1), xaxt = "n", xlab='Founder size', ylab="Global Expected Heterozygosty")
#ran 1000, and from this x times there was no variance/diversity
axis(1, at=1:7, labels=c("2","4","6","8","10", "20", "40"))
abline(h=G.EHet.mount, col="blue")
legend("bottomright", legend = "Mountain Pheasant", col = "blue", bty= "n", fill = "blue")
#put everything in a table
#use *cbind* to plot multiple boxes in th esame plot (binds per column)


length(G.EHet)-length(G.EHet.subset) #calculates number of simulations that showed no variance






##################################################################################################################
#ANOVA - Global EHet

y=c(G.EHet.2, G.EHet.4, G.EHet.6, G.EHet.8, G.EHet.10, G.EHet.20, G.EHet.40)
x=c(1,2,3,4,5,6,7)
x.factor =as.factor(x)
aov.data <- data.frame(y, x.factor) #make dataframe where x is a factor and y is numeric
str(aov.data) #look at dataframe


aov.out = aov(y ~ x.factor, data=aov.data)
summary(aov.out)
summary.lm(aov.out)#f2 abd f3 sig
TukeyHSD(aov.out) #all >0.05, so non sig


#Testing the assumptions


bartlett.test(y ~ x.factor, data=aov.data) #Homogeneity of variance
#Insignificant result, therefore variances can be assumed to be equal

#Check the normality assumption
plot(aov.out, 2) #Model checking plots
#As all the points do not fall approximately along this reference line, we cannot assume normality.

#Check the homogeneity of variance assumption
leveneTest(y ~ x.factor, data = aov.data) #p-value is less than the significance level of 0.05. This means that there is no evidence to suggest that the variance across groups is statistically significantly different. Therefore, we can assume the homogeneity of variances in the different treatment groups.
plot(aov.out, 1)
#Points ?? are detected as outliers, which can severely affect normality and homogeneity of variance. It can be useful to remove outliers to meet the test assumptions.

#normality test
shapiro.test(resid(aov.out)) #Error sample size must be between 3 and 5000



#Non-parametric alternative to ANOVA:
kruskal.test(y ~ x.factor, data=aov.data)
# p-value = 0.2958 = non significant









##################################################################################################################
#ANOVA - Fh


y2=c(mean.Fh.2, mean.Fh.4, mean.Fh.6, mean.Fh.8, mean.Fh.10, mean.Fh.20, mean.Fh.40)
x2=c(1,2,3,4,5,6,7)
x2.factor =as.factor(x2)
aov.data.Fh <- data.frame(y2, x2.factor) #make dataframe where x is a factor and y is numeric
str(aov.data.Fh) #look at dataframe


aov.out.Fh = aov(y2 ~ x2.factor, data=aov.data.Fh)
summary(aov.out.Fh)
summary.lm(aov.out.Fh)#non sig
TukeyHSD(aov.out.Fh)#non sig


#Testing the assumptions

bartlett.test(y2 ~ x2.factor, data=aov.data.Fh) #Homogeneity of variance
#Significant result, therefore variances cannot be assumed to be equal?

#Check the normality assumption
plot(aov.out.Fh, 2) #Model checking plots
#As all the points fall approximately along this reference line, we can assume normality.

#Check the homogeneity of variance assumption
leveneTest(y2 ~ x2.factor, data = aov.data.Fh) #p-value is not less than the significance level of 0.05. This means that there is no evidence to suggest that the variance across groups is statistically significantly different. Therefore, we can assume the homogeneity of variances in the different treatment groups.
plot(aov.out.Fh, 1)
#Points 24, 57, 62 are detected as outliers, which can severely affect normality and homogeneity of variance. It can be useful to remove outliers to meet the test assumptions.

#normality test
shapiro.test(resid(aov.out.Fh))
#non significant




#Non-parametric alternative to ANOVA:
kruskal.test(y ~ x.factor, data=aov.data)




##################################################################################################################
#OTHER?


plot(fit) #x=mean.Fh and automatically: density on y
abline(v=0,lty=2) #line to show the mean Fh for the real pheasant data

d1 = locfit(~Fh.malay)
f= locfit(~Fh.mount)
plot(d1, xlab="Fh", ylab="density", xlim=c(-10^-6,-10^-4), col="red") # change the values for xlim
lines(f, col="blue")



var.overall.5 = var(mean.Fh) #mean population Fh variance=0.1495276


library(Rfast)
var.Fh=rowVars(Fh)


hist(Fh[,1])
hist(Fh[,1],freq=F)
lines(density(Fh))
lines(density(Fh[,1]))
lines(density(Fh[,1]),col=2)




