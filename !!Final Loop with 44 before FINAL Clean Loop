library(scrm)
library(stringr)
library(locfit)
library(carData)
library(car)
library(Rfast)
library(FSA)

sessionInfo()

#Kardos et al. 2015. He describes two measures of homozygosity - one where you look only at the minor allele frequency, and one where you look at both the minor and major alleles across the population. Kardos et al. 2015 (and everyone who uses PLINK to calculate homozygosity) uses the prior method: 
#sum of (1-2p(1-p))
#where p is the minor allele frequency at locus 1 across the whole population. 



#First we vdescribed our variables:
nhap=44#2*number of samples i.e. number of pheasante in real data (bc diploid) 
#2 seperate simulations, one for malaysian (20 indv) and mountain (22 indv)
nrep=1000#min 100, 1000 if fast enough
bp=1000000
N0=500 #effective population ≠ census size, mention in report!
T1=150/(4*(N0)) #time at bottleneck
N1=5 #pop at bottlneck
N2=150000 #ancestral pop
G=-(1/T1)*log(N1/(N0)) #exponential growth rate after bottleneck
a2=0 #exponential/constant growth rate in ancestral pop
theta0=4*(N0)*(1.33*10^-9)*bp #with 1.33*10^-9 = mutationrate per yer (=generation) per locus
p=N1/N2 #pop proportion at bottleneck (bottleneck/ancestral pop)
r = 0.03 #crossover probability between the two ends of the locus bc 3cM/Mb = 0.03% chance of crossover in the region
rho = 4*r*N0 #recombination rate

#mimic real data
#if  this happens (object has no variables), do heterozygosity
#with small seq by chance th eprobabilty of having a varient is v low ( all indv the same) 

Fh = matrix(ncol = nrep,nrow=nhap/2) #make columns for each iteration, with the number of rows = nbr of inividuals
#Fh calculated with only minor allele frequency (see Keller et al.)
G.EHet = matrix(nrow = nrep) #Global heterozygosity (Rita's formula)
G.EHom = matrix(nrow = nrep)
Fis = matrix(ncol = nrep,nrow=nhap/2)
for(a in 1:nrep) #loop it nrep times
{
  command = paste(nhap, 1, "-t",theta0, "-G",G, "-eG",T1,a2, "-eN",T1,p, "-r",rho,bp , "-print-model")
  scrm.data<-scrm(command, file="test1")
  write.table(scrm.data, file = paste("tabledata",a, ".txt",sep = "")) #write a table for each loop and paste file in directory
  
  scrm.df=as.data.frame(scrm.data) #coerce to class data.frame
  
  if(dim(scrm.df)[2]==0){ #bc low mutation rate sometimes no variants; to avoid this, tell loop to make G.EHet and Fh equal 0 if the dimensions of the columns [2] of scrm.df are 0 (bc if dim = 0 that means no diversity which means there is no heterozygosity, only homozygosity)
    
    Fh[,a]<-1 #high values = inbreeding (more homozygotes), i.e. no variation and range form -1 to 1
    # G.EHet[a]<-0 
    # G.EHom[a]<-1
    Fis[,a]<-1 #pos values = inbreeding, i.e. no variation and range form -1 to 1 
    
  }
  
  else{#if the dim ≠ 0 then just rin loop normally
    
    shuffled.data <- scrm.df[sample(nrow(scrm.df)),] #shuffle the rows
    shuffled.matrix <- data.matrix(shuffled.data, rownames.force = NA) #Convert a Data Frame to a Numeric Matrix
    diploid.data <- rowsum(shuffled.matrix, as.integer(gl(nrow(shuffled.matrix), 2, nrow(shuffled.matrix)))) #combine 2 rows into 1 (haploid into diploid)
    named.diploid <- ifelse(diploid.data %% 2 == 0,"Hom","Het") #if dividable by 2 and remainder 0, then name "Hom", if not name "Het"
    
    ncol(shuffled.matrix)*nrow(shuffled.matrix)
    n.loci <- ncol(shuffled.matrix)
    #number of loci (i.e. segsites, i.e. SNPs?)
    
    #Calculate O(Hom) across all SNPs per individual
    Hom_per_row = numeric() #Homozygosity per colum by counting the "Hom"s
    for (i in 1:nhap/2)#nbr of rows, that's how many individuals we have
    {
      Hom_per_row[i] = sum(str_count(named.diploid[i,], "Hom"))#/n.loci #number of hom divided by number of loci (frequency of hom per number of loci)
    }
    #is the observed number of homozygous loci for the ith individual
    #number of hom divided by number of loci (frequency of hom per number of loci) 
    
    #Calculate E(Hom) for all individuals in the sample i.e. across the population
    M1_per_col = numeric() #allele frequency of 1s
    M0_per_col = numeric() #allele frequency of 0s
    maf = numeric() #minor allele frequency (See Puncell)
    EHom = numeric() #Expected Homozygosity
    SEHom = (numeric)
    for (i in 1:n.loci) #calculations per loci (i.e. columns) not individuals
    #pi (=maf) is the MAF for SNPs i = 1, ... , n.loci.
    #count number of ones and zeros and depending on which is smaller use that one to calculate the minor allele frequency
    {
      M1_per_col[i] = sum(str_count(shuffled.matrix[,i], "1")) #count all the 1 (=mutation, whereas 0 are the ancestral state) for each segsite
      M0_per_col[i] = sum(str_count(shuffled.matrix[,i], "0")) 
      if (M1_per_col[i] >=  M0_per_col[i]) {  #if number of M1 > M0, then use M0 as the minor allele ferquency
        maf[i]=M0_per_col[i]/nhap #number of hom per column, divided by total number of rows (2*individuals), so maf per loci
        EHom[i]=1-(2*maf[i]*(1-maf[i]))  #expected homozygosity per locus across the whole population
      } else {
        maf[i]=M1_per_col[i]/nhap #number of hom per column, divided by total number of rows (2*individuals), so maf per loci
        EHom[i]=1-(2*maf[i]*(1-maf[i]))  #expected homozygosity per locus across the whole population
      }
    }
    
    SEHom = sum(EHom)/22 # expected mean number of homozygous genotypes across m loci per indivual/across the population
    #leave you with one value
  
    Fh[,a]= (Hom_per_row-(SEHom))/(n.loci-SEHom) #Fh as proxy for inbreeding
     # mean(Fh)
     # max(Fh)
     # min(Fh)
     # hist(Fh)
    
    #Fh between -1 and 1 ??
    #if (Hom_per_row-SEHom) = (n.loci-SEHom), i.e. Hom_per_row = n.loci, then Fh = 1 
    #negative when Hom_per_row < SEHom and 
 
    #deviation of the observed heterozygosity of an individual relative to the heterozygosity expected under random mating (Hardy–Weinberg equilibrium)
    #Fis=1−Ho/He. Fis>0 signifies more inbreeding than is expected at random, whereas Fis<0 indicates that inbreeding occurred less often than would be expected at random.
    
    #Calculate O(Het) fir Fis calculation
    Het_per_row = numeric() #Homozygosity per colum by counting the "Hom"s
    for (i in 1:nhap/2)#nbr of rows, that's how many individuals we have
    {
      Het_per_row[i] = sum(str_count(named.diploid[i,], "Het"))/n.loci #number of hom divided by number of loci (frequency of hom per number of loci)
      #Ho = observed heterozygosity = no. of Hets/N.
    }
    
    #Calculate total allele frequencies, E(Het) and Fis
    Fis.Mut_per_col = numeric() #number of allele 1 per column
    Fis.maf = numeric() #major allele frequency ratio = number of 1 divided by total number of alleles = p (because ratio)
    Fis.Min.mut_per_col=numeric() #number of allele 0 per column
    Fis.min.af = numeric() #minor allele frequency ratio = number of 0 divided by total number of alleles =p
    Fis.total.allele.freq=numeric() #sum of p^2 (individual observed homozygosity)
    EHet = numeric() 
    for (i in 1:n.loci)
    {
      Fis.Mut_per_col[i] = sum(str_count(shuffled.matrix[,i], "1")) #count all the 1 (=mutation, whereas 0 are the ancestral state) for each segsite
      Fis.maf[i]=Fis.Mut_per_col[i]/nhap #number of hom per column, divided by total number of rows (2*individuals), so maf per loci
      Fis.Min.mut_per_col[i] = sum(str_count(shuffled.matrix[,i], "0")) #count all the 0 (=mutation, whereas 0 are the ancestral state) for each segsite
      Fis.min.af[i] = Fis.Min.mut_per_col[i]/nhap
      Fis.total.allele.freq=  sum((Fis.maf[i])^2 + (Fis.min.af[i])^2)/22 #sum of p^2 across the population
      #Pi is the frequency of the ith allele for the population & Sum pi^2 is the sum of the squared population allele frequencies.
      #He = expected heterozygosity = 1 − Sum pi^2.
      
      EHet= 1- Fis.total.allele.freq
      #SEHet = mean(EHet)# expected mean number of homozygous genotypes across m loci
      #He = expected heterozygosity = 1 − Sum pi^2.
      #Pi is the frequency of the ith allele for the population & Sum pi^2 is the sum of the squared population allele frequencies.
      
      Fis[,a]= 1-((Het_per_row))/EHet #Fixation index

      #  mean(Fis)
      #  max(Fis)
      #  min(Fis)
      #  hist(Fis)
    }
  }
}


#write about how x % of the simualations had no diversity (where Fh = 0, get rif pf these)
##################################################################################################################
#Save Fh and Fis values - DO NOT OVERWRITE

Fh.5.sim = Fh
Fh.10.sim = Fh
Fh.25.sim = Fh
Fh.50.sim = Fh
Fh.100.sim = Fh
Fh.250.sim = Fh
Fh.500.sim = Fh

Fis.5.sim = Fis
Fis.10.sim = Fis
Fis.25.sim = Fis
Fis.50.sim = Fis
Fis.100.sim = Fis
Fis.250.sim = Fis
Fis.500.sim = Fis


# min(Fh)
# max(Fh)
# mean(Fh)
# 
# min(Fh.means.5)
# max(Fh.means.5)
# mean(Fh.means.5)
# var(Fh.means.5)
# 
# min(Fis)
# max(Fis)
# mean(Fis)
# 
min(Fis.means.25)
max(Fis.means.25)
mean(Fis.means.25)
var(Fis.means.25)

min(Fis.means.10)
max(Fis.means.10)
mean(Fis.means.10)
var(Fis.means.10)

##################################################################################################################
#Plot Fh using the mean

#mean Fh per iteration (col = iteration)
Fh.means.5=colMeans(Fh.5.sim) 
Fh.means.10=colMeans(Fh.10.sim)
Fh.means.25=colMeans(Fh.25.sim)
Fh.means.50=colMeans(Fh.50.sim)
Fh.means.100=colMeans(Fh.100.sim)
Fh.means.250=colMeans(Fh.250.sim)
Fh.means.500=colMeans(Fh.500.sim)

mean(c(Fh.means.5,Fh.means.10,Fh.means.25,Fh.means.50,Fh.means.100,Fh.means.250,Fh.means.500))
mean(c(Fh.means.5.o,Fh.means.10.o,Fh.means.25.o,Fh.means.50.o,Fh.means.100.o,Fh.means.250.o,Fh.means.500.o))

     
hist(Fh)  
     
     
Fis.5.var = var(Fh.means.5)
Fis.10.var = var(Fh.means.10)
Fis.25.var = var(Fh.means.25)
Fis.50.var = var(Fh.means.50)
Fis.100.var = var(Fh.means.100)
Fis.250.var = var(Fh.means.250)
Fis.500.var = var(Fh.means.500)

 
#Use the locfit function for nicer curves
Fh.5.loc.f=locfit(~Fh.means.5, alpha = 0.9)#, maxk=130, alpha = 0.9) #~x for a density estimation model
Fh.10.loc.f=locfit(~Fh.means.10, alpha = 0.9)#, maxk=130, alpha = 0.9) 
Fh.25.loc.f=locfit(~Fh.means.25, alpha = 0.9)#, maxk=130, alpha = 0.9) 
Fh.50.loc.f=locfit(~Fh.means.50, alpha = 0.9)#, maxk=130, alpha = 0.9) 
Fh.100.loc.f=locfit(~Fh.means.100, alpha = 0.9)#, maxk=130, alpha = 0.9) 
Fh.250.loc.f=locfit(~Fh.means.250, alpha = 0.9)#, maxk=130, alpha = 0.9) 
Fh.500.loc.f=locfit(~Fh.means.500, alpha = 0.9)#, maxk=130, alpha = 0.9) 

summary(Fh.25.loc.f) #gives description of the locfit
is.list(Fh.5.loc.f)

plot(density(Fh.means.5))

#plot mean and median onto the plot
#plot
plot(NULL, xlab="Fh", ylab="Density", xlim=c(0.5,1), ylim=c(0, 14))
lines(Fh.5.loc.f, col="firebrick2", lwd=1.25)
lines(Fh.10.loc.f, col="blue1", lwd=1.25)
lines(Fh.25.loc.f, col="green", lwd=1.25)
lines(Fh.50.loc.f, col="orange", lwd=1.25)
lines(Fh.100.loc.f, col="gray14", lwd=1.25)
lines(Fh.250.loc.f, col="purple", lwd=1.25)
lines(Fh.500.loc.f, col="deepskyblue", lwd=1.25)
#abline(v=mean.Fh.mount,lty=2) #line to show the mean Fh for the real pheasant data
colours = c("firebrick2", "blue1", "green", "orange", "gray14", "purple", "deepskyblue")
legend("topleft", legend=c("Fh.5","Fh.10", "Fh.25","Fh.50","Fh.100","Fh.250","Fh.500"), col = colours, cex=0.8, fill= colours, bty="n")

##################################################################################################################
#Plot Fh boxplot

colours = c("firebrick2", "blue1", "green", "orange", "gray14", "purple", "deepskyblue")
legend("topleft", legend=c("Fh.5","Fh.10", "Fh.25","Fh.50","Fh.100","Fh.250","Fh.500"), col = colours, cex=0.8, fill= colours, bty="n")

global.list = list(Fh.means.5, Fh.means.10,Fh.means.25,Fh.means.50,Fh.means.100,Fh.means.250,Fh.means.500)

#global.list = list(Fh.5.sim,Fh.10.sim,Fh.25.sim,Fh.50.sim,Fh.100.sim,Fh.250.sim,Fh.500.sim)

boxplot(global.list, ylim= c(0, 1), xaxt = "n", xlab='Founder size', ylab="Fh")
# #ran 1000, and from this x times there was no variance/diversity
axis(1, at=1:7, labels=c("5","10","25","50","100", "250", "500"))
#legend("bottomright", legend = "Mountain Pheasant", col = "blue", bty= "n", fill = "blue")
# #put everything in a table
# #use *cbind* to plot multiple boxes in th esame plot (binds per column)


##################################################################################################################
#Plot Fh mean? histgrams


hist(Fh.means.5)

par(mfrow=c(4,2))
hist(Fh.means.5)
hist(Fh.means.10)
hist(Fh.means.25)
hist(Fh.means.50)
hist(Fh.means.100)
hist(Fh.means.250)
hist(Fh.means.500)

par(mfrow=c(1,1))

par(mfrow=c(4,2))
hist(Fh.median.5)
hist(Fh.median.10)
hist(Fh.median.25)
hist(Fh.median.50)
hist(Fh.median.100)
hist(Fh.median.250)
hist(Fh.median.500)


##################################################################################################################
#Plot Fh mean scatter
# 
# 
# Fh.means.5.all=mean(Fh.means.5) 
# Fh.means.10.all=mean(Fh.means.10) 
# Fh.means.25.all=mean(Fh.means.25) 
# Fh.means.50.all=mean(Fh.means.50) 
# Fh.means.100.all=mean(Fh.means.100) 
# Fh.means.250.all=mean(Fh.means.250)  
# Fh.means.500.all=mean(Fh.means.500) 
# 
# par(mfrow=c(1,1))
# y.list.Fh = list(Fh.means.5.all, Fh.means.10.all,Fh.means.25.all,Fh.means.50.all,Fh.means.100.all,Fh.means.250.all,Fh.means.500.all)
# x.list.Fh=as.list(c(1,2,3,4,5,6,7))
# err.Fh=c(Fis.5.var, Fis.10.var,Fis.25.var,Fis.50.var,Fis.100.var,Fis.250.var,Fis.500.var)
# lm.Fh = lm(Fh.means.5.all)
# 
# 
# plot(x.list.Fh, y.list.Fh, pch=19, ylab="Fh", xaxt = "n", xlab='Founder size')
# arrows(x.hom, y.hom-(err.hom), x.hom, y.hom+(err.hom), length=0.05, angle=90, code=3)
# #abline(h=G.EHet.mount, col="blue")
# abline(lm.mount, col="red")
# axis(1, at=1:7, labels=c("5","10","25","50","100", "250", "500"))
# #legend("topright", legend=c("Global Expected Homozygosity in Mount Pheasants", "Line of best fit"), col = colours2 , cex=0.8, fill= colours2, bty = "n")
# mtext(bquote( y == .(slope) * x + .(intercept)), side=4, line= 0.5)                                            

##################################################################################################################
#Plot Fh curves with abline and zoomed in



par(mfrow=c(1,2))

#plot
plot(NULL, xlab="Fh", ylab="Density", xlim=c(0,1), ylim=c(0, 14))
lines(Fh.5.loc.f, col="firebrick2", lwd=1.25)
lines(Fh.10.loc.f, col="blue1", lwd=1.25)
lines(Fh.25.loc.f, col="green", lwd=1.25)
lines(Fh.50.loc.f, col="orange", lwd=1.25)
lines(Fh.100.loc.f, col="gray14", lwd=1.25)
lines(Fh.250.loc.f, col="purple", lwd=1.25)
lines(Fh.500.loc.f, col="deepskyblue", lwd=1.25)
abline(v=mean.Fh.mount.df,lty=2) #line to show the mean Fh for the real pheasant data
colours = c("firebrick2", "blue1", "green", "orange", "gray14", "purple", "deepskyblue")
#legend("topleft", legend=c("Fh.5","Fh.10", "Fh.25","Fh.50","Fh.100","Fh.250","Fh.500"), col = colours, cex=0.8, fill= colours, bty="n")


plot(NULL, xlab="Fh", ylab="Density", xlim=c(0.8,1), ylim=c(0, 14))
lines(Fh.5.loc.f, col="firebrick2", lwd=1.25)
lines(Fh.10.loc.f, col="blue1", lwd=1.25)
lines(Fh.25.loc.f, col="green", lwd=1.25)
lines(Fh.50.loc.f, col="orange", lwd=1.25)
lines(Fh.100.loc.f, col="gray14", lwd=1.25)
lines(Fh.250.loc.f, col="purple", lwd=1.25)
lines(Fh.500.loc.f, col="deepskyblue", lwd=1.25)
#abline(v=mean.Fh.mount,lty=2) #line to show the mean Fh for the real pheasant data
colours = c("firebrick2", "blue1", "green", "orange", "gray14", "purple", "deepskyblue")
#legend("topleft", legend=c("Fh.5","Fh.10", "Fh.25","Fh.50","Fh.100","Fh.250","Fh.500"), col = colours, cex=0.8, fill= colours, bty="n")

par(mfrow=c(1,1))






##################################################################################################################
#Plot Fh curves with 50 vs 150 generation



par(mfrow=c(1,2))
plot(NULL, xlab="Fh", ylab="Density", xlim=c(0.5,1), ylim=c(0, 14))
lines(Fh.5.loc.f, col="firebrick2", lwd=1.25)
lines(Fh.10.loc.f, col="blue1", lwd=1.25)
lines(Fh.25.loc.f, col="green", lwd=1.25)
lines(Fh.50.loc.f, col="orange", lwd=1.25)
lines(Fh.100.loc.f, col="gray14", lwd=1.25)
lines(Fh.250.loc.f, col="purple", lwd=1.25)
lines(Fh.500.loc.f, col="deepskyblue", lwd=1.25)
#abline(v=mean.Fh.mount,lty=2) #line to show the mean Fh for the real pheasant data
colours = c("firebrick2", "blue1", "green", "orange", "gray14", "purple", "deepskyblue")
#legend("topleft", legend=c("Fh.5","Fh.10", "Fh.25","Fh.50","Fh.100","Fh.250","Fh.500"), col = colours, cex=0.8, fill= colours, bty="n")


plot(NULL, xlab="Fh", ylab="Density", xlim=c(0.5,1), ylim=c(0, 14))
lines(Fh.5.loc.f.o, col="firebrick2", lwd=1.25)
lines(Fh.10.loc.f.o, col="blue1", lwd=1.25)
lines(Fh.25.loc.f.o, col="green", lwd=1.25)
lines(Fh.50.loc.f.o, col="orange", lwd=1.25)
lines(Fh.100.loc.f.o, col="gray14", lwd=1.25)
lines(Fh.250.loc.f.o, col="purple", lwd=1.25)
lines(Fh.500.loc.f.o, col="deepskyblue", lwd=1.25)
#abline(v=mean.Fh.mount,lty=2) #line to show the mean Fh for the real pheasant data
colours = c("firebrick2", "blue1", "green", "orange", "gray14", "purple", "deepskyblue")
#legend("topleft", legend=c("Fh.5","Fh.10", "Fh.25","Fh.50","Fh.100","Fh.250","Fh.500"), col = colours, cex=0.8, fill= colours, bty="n")
par(mfrow=c(1,1))






##################################################################################################################
#Plot Fh using the median

# median Fh per inividual
Fh.median.5=colMedians(Fh.5.sim)
Fh.median.10=colMedians(Fh.10.sim)
Fh.median.25=colMedians(Fh.25.sim)
Fh.median.50=colMedians(Fh.50.sim)
Fh.median.100=colMedians(Fh.100.sim)
Fh.median.250=colMedians(Fh.250.sim)
Fh.median.500=colMedians(Fh.500.sim)

hist(Fh.5.sim)
plot(density(Fh.median.5))
hist(Fh.median.5)

#Use the locfit function for nicer curves
Fh.5.loc.mf=locfit(~Fh.median.5, maxk=500, alpha = 0.9) #~x for a density estimation model
Fh.10.loc.mf=locfit(~Fh.median.10) 
Fh.25.loc.mf=locfit(~Fh.median.25) 
Fh.50.loc.mf=locfit(~Fh.median.50) 
Fh.100.loc.mf=locfit(~Fh.median.100) 
Fh.250.loc.mf=locfit(~Fh.median.250) 
Fh.500.loc.mf=locfit(~Fh.median.500) 

#Plot
plot(Fh.5.loc.mf, xlab="Fh.median", ylab="Density", ylim=c(0,8), xlim=c(-0.2,0.2), col="firebrick2")
lines(Fh.10.loc,mf, col="blue1")
lines(Fh.25.loc.mf, col="green")
lines(Fh.50.loc.mf, col="orange")
lines(Fh.100.loc.mf, col="gray14")
lines(Fh.250.loc.mf, col="purple")
lines(Fh.500.loc.mf, col="deepskyblue")
abline(v=median.Fh.mount,lty=2) #line to show the mean Fh for the real pheasant data

colours = c("firebrick2", "blue1", "green", "orange", "gray14", "purple", "deepskyblue")
legend("topleft", legend=c("Fh.5","Fh.10", "Fh.25","Fh.50","Fh.100","Fh.250","Fh.500"), col = colours, cex=0.8, fill= colours, bty="n")


##################################################################################################################
#Plot Fis using the mean


Fis.means.5=colMeans(Fis.5.sim) 
Fis.means.10=colMeans(Fis.4.sim)
Fis.means.25=colMeans(Fis.25.sim)
Fis.means.50=colMeans(Fis.50.sim)
Fis.means.100=colMeans(Fis.100.sim)
Fis.means.250=colMeans(Fis.250.sim)
Fis.means.500=colMeans(Fis.500.sim)

hist(Fis.means.2)
mean(Fis.means.2)
mean(Fis.2.sim)

#Locfit function
Fis.5.loc.f=locfit(~Fis.means.5, alpha = 0.9) #~x for a density estimation model
Fis.10.loc.f=locfit(~Fis.means.10, alpha = 0.9) 
Fis.25.loc.f=locfit(~Fis.means.25, alpha = 0.9) 
Fis.50.loc.f=locfit(~Fis.means.50, alpha = 0.9) 
Fis.100.loc.f=locfit(~Fis.means.100, alpha = 0.9) 
Fis.250.loc.f=locfit(~Fis.means.250, alpha = 0.9) 
Fis.500.loc.f=locfit(~Fis.means.500, alpha = 0.9) 

#Plot
plot(NULL, xlab="Fis", ylab="Density", ylim=c(0,14), xlim=c(0.5,1))
lines(Fis.5.loc.f, col="firebrick2", lwd=1.25)
lines(Fis.10.loc.f, col="blue1", lwd=1.25)
lines(Fis.25.loc.f, col="green", lwd=1.25)
lines(Fis.50.loc.f, col="orange", lwd=1.25)
lines(Fis.100.loc.f, col="gray14", lwd=1.25)
lines(Fis.250.loc.f, col="purple", lwd=1.25)
lines(Fis.500.loc.f, col="deepskyblue", lwd=1.25)
#abline(v=Fis.mount.mean,lty=2) #line to show the mean Fh for the real pheasant data
#abline(v=0,lty=2)
colours = c("firebrick2", "blue1", "green", "orange", "gray14", "purple", "deepskyblue")
legend("topleft", legend=c("Fh.5","Fh.10", "Fh.25","Fh.50","Fh.100","Fh.250","Fh.500"), col = colours, cex=0.8, fill= colours, bty="n")

#Fis=1−Ho/He. 
#Fis>0 signifies more inbreeding than is expected at random. 
#Fis<0 indicates that inbreeding occurred less often than would be expected at random.


##################################################################################################################
#Plot Fh using the median

# median Fh per inividual
Fis.median.5=colMedians(Fis.5.sim)
Fis.median.10=colMedians(Fis.10.sim)
Fis.median.25=colMedians(Fis.25.sim)
Fis.median.50=colMedians(Fis.50.sim)
Fis.median.100=colMedians(Fis.100.sim)
Fis.median.250=colMedians(Fis.250.sim)
Fis.median.500=colMedians(Fis.500.sim)

#Use the locfit function for nicer curves
Fis.5.loc.mf=locfit(~Fis.median.5) #~x for a density estimation model
Fis.10.loc.mf=locfit(~Fis.median.10) 
Fis.25.loc.mf=locfit(~Fis.median.25) 
Fis.50.loc.mf=locfit(~Fis.median.50) 
Fis.100.loc.mf=locfit(~Fis.median.100) 
Fis.250.loc.mf=locfit(~Fis.median.250) 
Fis.500.loc.mf=locfit(~Fis.median.500) 

#Plot
plot(Fis.5.loc.mf, xlab="Fis.median", ylab="Density", ylim=c(0,6), xlim=c(-0.7,0.7), col="firebrick2")
lines(Fis.10.loc,mf, col="blue1")
lines(Fis.25.loc.mf, col="green")
lines(Fis.50.loc.mf, col="orange")
lines(Fis.100.loc.mf, col="gray14")
lines(Fis.250.loc.mf, col="purple")
lines(Fis.500.loc.mf, col="deepskyblue")
abline(v=median.Fh.mount,lty=2) #line to show the mean Fh for the real pheasant data

colours = c("firebrick2", "blue1", "green", "orange", "gray14", "purple", "deepskyblue")
legend("topright", legend=c("Fh.5","Fh.10", "Fh.25","Fh.50","Fh.100","Fh.250","Fh.500"), col = colours, cex=0.8, fill= colours, bty="n")



##################################################################################################################
#ANOVA - Fh


yfh=c(Fh.means.5, Fh.means.10, Fh.means.25, Fh.means.50, Fh.means.100, Fh.means.250, Fh.means.500)
xfh=c(1,2,3,4,5,6,7)
xfh.factor =as.factor(xfh)
aov.data.Fh.f <- data.frame(yfh, xfh.factor) #make dataframe where x is a factor and y is numeric
str(aov.data.Fh.f) #look at dataframe


aov.out.Fh.f = aov(yfh ~ xfh.factor, data=aov.data.Fh.f)
summary(aov.out.Fh.f)
summary.lm(aov.out.Fh.f)#non sig
TukeyHSD(aov.out.Fh.f)#non sig


# #Testing the assumptions
# 
# bartlett.test(y2 ~ x2.factor, data=aov.data.Fh) #Homogeneity of variance
# #Significant result, therefore variances cannot be assumed to be equal?
# 
# #Check the normality assumption
# plot(aov.out.Fh, 2) #Model checking plots
# #As all the points fall approximately along this reference line, we can assume normality.
# 
# #Check the homogeneity of variance assumption
# leveneTest(y2 ~ x2.factor, data = aov.data.Fh) #p-value is not less than the significance level of 0.05. This means that there is no evidence to suggest that the variance across groups is statistically significantly different. Therefore, we can assume the homogeneity of variances in the different treatment groups.
# plot(aov.out.Fh, 1)
# #Points 24, 57, 62 are detected as outliers, which can severely affect normality and homogeneity of variance. It can be useful to remove outliers to meet the test assumptions.
# 
# #normality test
# shapiro.test(resid(aov.out.Fh))
# #non significant


#Non-parametric alternative to ANOVA:
kruskal.test(yfh ~ xfh.factor, data=aov.data.Fh.f)


#Transform the data using log
logyfh <- log(1+yfh)
xfh=c(1,2,3,4,5,6,7)
xfh.factor =as.factor(xfh)
aov.data.Fh.log.f <- data.frame(logyfh, xfh.factor) #make dataframe where x is a factor and y is numeric
str(aov.data.Fh.log.f) #look at dataframe

aov.out.Fh.log.f = aov(logyfh ~ xfh.factor, data=aov.data.Fh.log.f)
summary(aov.out.Fh.log.f)
summary.lm(aov.out.Fh.log.f)#non sig
TukeyHSD(aov.out.Fh.log.f)#non sig


kruskal.test(logyfh ~ xfh.factor, data=aov.data.Fh.log.f)


##################################################################################################################
#ANOVA - Fis


yfis=c(Fis.means.5, Fis.means.10, Fis.means.25, Fis.means.50, Fis.means.100, Fis.means.250,Fis.means.500)
xfis=c(1,2,3,4,5,6,7)
xfis.factor =as.factor(xfis)
aov.data.Fis.f <- data.frame(yfis, xfis.factor) #make dataframe where x is a factor and y is numeric
str(aov.data.Fis.f) #look at dataframe

aov.out.Fis.f = aov(yfis ~ xfis.factor, data=aov.data.Fis.f)
summary(aov.out.Fis.f)
summary.lm(aov.out.Fis.f)#non sig
TukeyHSD(aov.out.Fis.f)#non sig

#Testing the assumptions
# 
# bartlett.test(y3 ~ x3.factor, data=aov.data.Fis) #Homogeneity of variance
# #Significant result, therefore variances cannot be assumed to be equal?
# 
# #Check the normality assumption
# plot(aov.out.Fis, 2) #Model checking plots
# #As all the points fall approximately along this reference line, we can assume normality.
# 
# #Check the homogeneity of variance assumption
# leveneTest(y3 ~ x3.factor, data = aov.data.Fis) #p-value is not less than the significance level of 0.05. This means that there is no evidence to suggest that the variance across groups is statistically significantly different. Therefore, we can assume the homogeneity of variances in the different treatment groups.
# plot(aov.out.Fis, 1)
# #Points 24, 57, 62 are detected as outliers, which can severely affect normality and homogeneity of variance. It can be useful to remove outliers to meet the test assumptions.
# 
# #normality test
# shapiro.test(resid(aov.out.Fis))
# #non significant



#Non-parametric alternative to ANOVA:
kruskal.test(yfis ~ xfis.factor, data=aov.data.Fis.f)






